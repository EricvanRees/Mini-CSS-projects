body {
  width: 100%;
  height: 100vh;
  /* get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0. */ 
  margin: 0;
  background-color: #1b1b32;
  color: #f5f6f7;
  font-family: Tahoma;
  font-size: 16px;
}

h1, p {
  margin: 1em auto;
  text-align: center;
}

form {
  width: 60vw;
  max-width: 500px;
  min-width: 300px;
  margin: 0 auto;
  /* The submit button is sitting at the bottom of the form element. Add 2em of padding only to the bottom of the form. */
  padding-bottom: 2em;
}

fieldset {
  border: none;
  padding: 2rem 0;
  border-bottom: 3px solid #3b3b4f;
}

/* select the last fieldset element */
fieldset:last-of-type {
  border-bottom: none;
}
/* The rem unit stands for root em, and is relative to the font size of the html element. */ 

/* As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element */

label {
  display: block;
  margin: 0.5rem 0;
}

/* Select all input, textarea, and select elements, and make them take up the full width of their parent elements.*/ 
input,
textarea,
select {
  margin: 10px 0 0 0;
  width: 100%;
  min-height: 2em;
}

input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
  color: #ffffff;
  
}

/* Give the .inline class elements a width of unset. This will remove the earlier rule which set all the input elements to width: 100%. */

/* If you look close enough, you will notice the .inline elements are too high on the line. 
To combat this, set the vertical-align property to middle. */

.inline {
width: unset;
margin: 0 0.5em 0 0;
vertical-align: middle;
}

/* To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. */ 

input[type="submit"] {
  display: block;
  width: 60%;
  min-width: 300px;
  margin: 1em auto;
  height: 2em;
  font-size: 1.1rem;
  background-color: #3b3b4f;
  border-color: white;
}

/* By default, a padding of 1px 2px is given to input elements you can type in. Using another attribute selector, style the input with a type of file to be the same padding as the other input elements. */ 

input[type="file"] {
  padding: 1px 2px;
}

a {
  color: #dfdfe2;
}